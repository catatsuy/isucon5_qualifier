// Generated by ego.
// DO NOT EDIT

//line entries.ego:2
package main

import "fmt"
import "html"
import "io"

import "strings"

func EntriesMyTmpl(w io.Writer, e struct {
	Owner   *User
	Entries []Entry
	Myself  bool
}) {
//line entries.ego:11
	_, _ = io.WriteString(w, "<!DOCTYPE html>\n<html>\n<head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html\" charset=\"utf-8\">\n    <link rel=\"stylesheet\" href=\"/css/bootstrap.min.css\">\n    <title>ISUxi</title>\n</head>\n\n<body class=\"container\">\n<h1 class=\"jumbotron\"><a href=\"/\">ISUxiへようこそ!</a></h1>\n<h2>")
//line entries.ego:21
	_, _ = io.WriteString(w, html.EscapeString(fmt.Sprint(e.Owner.NickName)))
//line entries.ego:21
	_, _ = io.WriteString(w, "さんの日記</h2>\n")
//line entries.ego:22
	if e.Myself {
//line entries.ego:23
		_, _ = io.WriteString(w, "\n<div class=\"row\" id=\"entry-post-form\">\n  <form method=\"POST\" action=\"/diary/entry\">\n    <div class=\"col-md-4 input-group\">\n      <span class=\"input-group-addon\">タイトル</span>\n      <input type=\"text\" name=\"title\" />\n    </div>\n    <div class=\"col-md-4 input-group\">\n      <span class=\"input-group-addon\">本文</span>\n      <textarea name=\"content\" ></textarea>\n    </div>\n    <div class=\"col-md-2 input-group\">\n      <span class=\"input-group-addon\">\n        友だちのみに限定<input type=\"checkbox\" name=\"private\" />\n      </span>\n    </div>\n    <div class=\"col-md-1 input-group\">\n      <input class=\"btn btn-default\" type=\"submit\" value=\"送信\" />\n    </div>\n  </form>\n</div>\n")
//line entries.ego:43
	}
//line entries.ego:44
	_, _ = io.WriteString(w, "\n\n<div class=\"row\" id=\"entries\">\n    ")
//line entries.ego:46
	for _, entry := range e.Entries {
//line entries.ego:47
		_, _ = io.WriteString(w, "\n    <div class=\"panel panel-primary entry\">\n        <div class=\"entry-title\">タイトル: <a href=\"/diary/entry/")
//line entries.ego:48
		_, _ = io.WriteString(w, html.EscapeString(fmt.Sprint(entry.ID)))
//line entries.ego:48
		_, _ = io.WriteString(w, "\">")
//line entries.ego:48
		_, _ = io.WriteString(w, html.EscapeString(fmt.Sprint(entry.Title)))
//line entries.ego:48
		_, _ = io.WriteString(w, "</a></div>\n        <div class=\"entry-content\">\n            ")
//line entries.ego:50
		for _, s := range strings.Split(entry.Content, "\n") {
//line entries.ego:51
			_, _ = io.WriteString(w, "\n            ")
//line entries.ego:51
			_, _ = io.WriteString(w, html.EscapeString(fmt.Sprint(s)))
//line entries.ego:51
			_, _ = io.WriteString(w, "<br />\n            ")
//line entries.ego:52
		}
//line entries.ego:53
		_, _ = io.WriteString(w, "\n        </div>\n        ")
//line entries.ego:54
		if entry.Private {
//line entries.ego:54
			_, _ = io.WriteString(w, "<div class=\"text-danger entry-private\">範囲: 友だち限定公開</div>")
//line entries.ego:54
		}
//line entries.ego:55
		_, _ = io.WriteString(w, "\n        <div class=\"entry-created-at\">更新日時: ")
//line entries.ego:55
		_, _ = io.WriteString(w, html.EscapeString(fmt.Sprint(entry.CreatedAt.Format("2006-01-02 15:04:05"))))
//line entries.ego:55
		_, _ = io.WriteString(w, "</div>\n        <div class=\"entry-comments\">コメント: ")
//line entries.ego:56
		_, _ = io.WriteString(w, html.EscapeString(fmt.Sprint(numComments(entry.ID))))
//line entries.ego:56
		_, _ = io.WriteString(w, "件</div>\n    </div>\n    ")
//line entries.ego:58
	}
//line entries.ego:59
	_, _ = io.WriteString(w, "\n</div>\n\n</body>\n</html>\n")
//line entries.ego:63
}

var _ fmt.Stringer
var _ io.Reader
var _ = html.EscapeString
